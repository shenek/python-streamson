on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Release

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        #os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Setup python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - name: Setup python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Setup python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python

      - name: Install dependencies
        run: |
          env PATH="${PATH}:${HOME}/.poetry/bin" poetry install

      - name: Build wheels
        run: |
          env PATH="${PATH}:${HOME}/.poetry/bin" poetry run maturin build

      - name: Copy binary
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p ./python-streamson-linux/
          cp target/wheels/*.whl python-streamson-linux/
          tar czf python-streamson-linux.tar.gz python-streamson-linux
          mkdir -p ./dist
          cp python-streamson-linux.tar.gz dist/

      #- name: Copy binary
      #  if: matrix.os == 'windows-latest'
      #  run: |
      #    mkdir -p ./dist
      #    cp target/wheel/*.whl dist/

      - name: Copy binary
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p ./python-streamson-macos/
          cp target/wheels/*.whl python-streamson-macos/
          tar czf python-streamson-macos.tar.gz python-streamson-macos
          mkdir -p ./dist
          cp python-streamson-macos.tar.gz dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}
          path: ./dist

      - name: List
        run: ls -al ./dist

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: ['build']

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Download artifacts ubuntu
        uses: actions/download-artifact@v1
        with:
          name: ubuntu-latest
          path: dist

      #- name: Download artifacts windows
      #  uses: actions/download-artifact@v1
      #  with:
      #    name: windows-latest
      #    path: dist

      - name: Download artifacts macos
        uses: actions/download-artifact@v1
        with:
          name: macos-latest
          path: dist

      - name: Get description
        run: echo "##[set-output name=tag_description;]$(git tag -l --format='%(contents:body)' ${{ github.ref }})"
        id: get_description

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "${{ steps.get_description.outputs.description }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset ubuntu
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/python-streamson-linux.tar.gz
          asset_name: python-streamson-linux.tar.gz
          asset_content_type: application/tar+gzip


      #- name: Upload Release Asset windows
      #  uses: actions/upload-release-asset@v1.0.1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }}
      #    asset_path: dist/ucelofka-windows.exe
      #    asset_name: ucelofka-windows.exe
      #    asset_content_type: application/bin

      - name: Upload Release Asset macos
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/python-streamson-macos.tar.gz
          asset_name: python-streamson-macos.tar.gz
          asset_content_type: application/tar+gzip
